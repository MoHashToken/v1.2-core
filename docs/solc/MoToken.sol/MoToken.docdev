{
  "details": "This contract is an extension of ERC20PresetMinterPauser which has implementations of ERC20, Burnable, Pausable,  Access Control and Context.  In addition to serve as the ERC20 implementation this also serves as a vault which will hold  1. stablecoins transferred from the users during token purchase and  2. tokens themselves which are transferred from the users while requesting for redemption  3. restrict transfers to only whitelisted addresses",
  "kind": "dev",
  "methods":
  {
    "allowance(address,address)":
    {
      "details": "See {IERC20-allowance}."
    },
    "approve(address,uint256)":
    {
      "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
    },
    "balanceOf(address)":
    {
      "details": "See {IERC20-balanceOf}."
    },
    "burn(uint256)":
    {
      "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
    },
    "burn(uint256,address)":
    {
      "params":
      {
        "_address": "The address which holds the tokens",
        "_tokens": "The amount of tokens to burn"
      }
    },
    "burnFrom(address,uint256)":
    {
      "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
    },
    "decimals()":
    {
      "returns":
      {
        "_0": "uint8 returns number of decimals for display"
      }
    },
    "decreaseAllowance(address,uint256)":
    {
      "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
    },
    "getRoleAdmin(bytes32)":
    {
      "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
    },
    "getRoleMember(bytes32,uint256)":
    {
      "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
    },
    "getRoleMemberCount(bytes32)":
    {
      "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
    },
    "grantRole(bytes32,address)":
    {
      "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
    },
    "hasRole(bytes32,address)":
    {
      "details": "Returns `true` if `account` has been granted `role`."
    },
    "increaseAllowance(address,uint256)":
    {
      "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
    },
    "isUnderwriter(address)":
    {
      "params":
      {
        "_account": "The address being checked"
      },
      "returns":
      {
        "_0": "bool Underwriter check success/failure"
      }
    },
    "linkToJuniorToken(address)":
    {
      "params":
      {
        "juniorToken": "Token address"
      }
    },
    "linkToSeniorToken(address)":
    {
      "params":
      {
        "seniorToken": "Token address"
      }
    },
    "mint(address,uint256)":
    {
      "details": "Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
    },
    "name()":
    {
      "details": "Returns the name of the token."
    },
    "pause()":
    {
      "details": "Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
    },
    "paused()":
    {
      "details": "Returns true if the contract is paused, and false otherwise."
    },
    "receiveStableCoins(address,address,uint256)":
    {
      "params":
      {
        "_address": "External address to transfer stablecoins from",
        "_amount": "The amount of stablecoins to transfer",
        "_contractAddress": "Stablecoin contract address on chain"
      },
      "returns":
      {
        "_0": "bool Boolean indicating whether the transfer was success/failure"
      }
    },
    "receiveTokens(address,uint256)":
    {
      "params":
      {
        "_address": "External address to transfer tokens from",
        "_tokens": "The amount of tokens to transfer"
      },
      "returns":
      {
        "_0": "bool Boolean indicating whether the transfer was success/failure"
      }
    },
    "renounceRole(bytes32,address)":
    {
      "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
    },
    "revokeRole(bytes32,address)":
    {
      "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
    },
    "setAccessControlManagerAddress(address)":
    {
      "params":
      {
        "_address": "Set accessControlManagerAddress to this address"
      }
    },
    "setTradability(bool)":
    {
      "params":
      {
        "tradable": "tradability set to true/false"
      }
    },
    "supportsInterface(bytes4)":
    {
      "details": "See {IERC165-supportsInterface}."
    },
    "symbol()":
    {
      "details": "Returns the symbol of the token, usually a shorter version of the name."
    },
    "totalSupply()":
    {
      "details": "See {IERC20-totalSupply}."
    },
    "transfer(address,uint256)":
    {
      "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
    },
    "transferFrom(address,address,uint256)":
    {
      "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
    },
    "transferStableCoins(address,address,uint256)":
    {
      "params":
      {
        "_address": "External address to transfer stablecoins to",
        "_amount": "The amount of stablecoins to transfer",
        "_contractAddress": "Stablecoin contract address on chain"
      },
      "returns":
      {
        "_0": "bool Boolean indicating whether the transfer was success/failure"
      }
    },
    "transferTokens(address,uint256)":
    {
      "params":
      {
        "_address": "External address to transfer tokens to",
        "_tokens": "The amount of tokens to transfer"
      },
      "returns":
      {
        "_0": "bool Boolean indicating whether the transfer was success/failure"
      }
    },
    "unpause()":
    {
      "details": "Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
    }
  },
  "stateVariables":
  {
    "accessControlManagerAddress":
    {
      "details": "Address of contract which manages whitelisted addresses"
    }
  },
  "version": 1
}